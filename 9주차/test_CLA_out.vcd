$date
	Sun Nov 01 00:05:36 2020
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_CLA_four $end
$scope module tb $end
$var wire 4 ! a [3:0] $end
$var wire 4 " b [3:0] $end
$var wire 1 # cin $end
$var wire 4 $ s [3:0] $end
$var wire 4 % p [3:0] $end
$var wire 4 & g [3:0] $end
$var wire 1 ' cout $end
$var wire 4 ( c [3:0] $end
$scope module ad $end
$var wire 4 ) a [3:0] $end
$var wire 4 * b [3:0] $end
$var wire 3 + c [2:0] $end
$var wire 1 # cin $end
$var wire 4 , s [3:0] $end
$upscope $end
$scope module cll $end
$var wire 1 # cin $end
$var wire 4 - p [3:0] $end
$var wire 4 . g [3:0] $end
$var reg 4 / cout [3:0] $end
$upscope $end
$scope module pg $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 4 2 p [3:0] $end
$var wire 4 3 g [3:0] $end
$scope module pg0 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 6 g $end
$var wire 1 7 p $end
$upscope $end
$scope module pg1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : g $end
$var wire 1 ; p $end
$upscope $end
$scope module pg2 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > g $end
$var wire 1 ? p $end
$upscope $end
$scope module pg3 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 B g $end
$var wire 1 C p $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
0'
b0 &
b0 %
b0 $
0#
b0 "
b0 !
$end
#1000
b110 +
b1000 $
b1000 ,
b110 (
b110 /
b10 &
b10 .
b10 3
1:
b100 %
b100 -
b100 2
1?
19
18
1<
b10 "
b10 *
b10 1
b110 !
b110 )
b110 0
#2000
b0 +
b1110 $
b1110 ,
b0 (
b0 /
1;
b0 &
b0 .
b0 3
0:
b1110 %
b1110 -
b1110 2
1C
08
1@
b1100 !
b1100 )
b1100 0
#3000
b11 +
b1100 $
b1100 ,
b11 (
b11 /
b1 &
b1 .
b1 3
16
b1010 %
b1010 -
b1010 2
0?
15
09
1A
14
18
0<
0@
b1001 "
b1001 *
b1001 1
b11 !
b11 )
b11 0
#4000
1'
b110 +
b101 $
b101 ,
b1110 (
b1110 /
0;
1:
b1001 %
b1001 -
b1001 2
17
06
b110 &
b110 .
b110 3
1>
19
1=
04
1<
b1111 "
b1111 *
b1111 1
b110 !
b110 )
b110 0
#5000
0'
b11 +
b1110 $
b1110 ,
b11 (
b11 /
b1000 %
b1000 -
b1000 2
07
16
b11 &
b11 .
b11 3
0>
0=
14
0<
b1011 "
b1011 *
b1011 1
b11 !
b11 )
b11 0
#6000
1'
b0 +
b101 $
b101 ,
b1000 (
b1000 /
17
06
1?
0:
b101 %
b101 -
b101 2
0C
b1000 &
b1000 .
b1000 3
1B
05
09
1=
08
1@
b1100 "
b1100 *
b1100 1
b1001 !
b1001 )
b1001 0
#7000
0'
b0 (
b0 /
0?
b0 %
b0 -
b0 2
07
b0 &
b0 .
b0 3
0B
0=
0A
04
0@
b1 $
b1 ,
b0 "
b0 *
b0 1
b0 !
b0 )
b0 0
1#
#8000
b110 +
b1001 $
b1001 ,
b110 (
b110 /
b10 &
b10 .
b10 3
1:
b100 %
b100 -
b100 2
1?
19
18
1<
b10 "
b10 *
b10 1
b110 !
b110 )
b110 0
#9000
b0 +
b1111 $
b1111 ,
b0 (
b0 /
1;
b0 &
b0 .
b0 3
0:
b1110 %
b1110 -
b1110 2
1C
08
1@
b1100 !
b1100 )
b1100 0
#10000
b11 +
b1101 $
b1101 ,
b11 (
b11 /
b1 &
b1 .
b1 3
16
b1010 %
b1010 -
b1010 2
0?
15
09
1A
14
18
0<
0@
b1001 "
b1001 *
b1001 1
b11 !
b11 )
b11 0
#11000
1'
b111 +
b110 $
b110 ,
b1111 (
b1111 /
0;
1:
b1001 %
b1001 -
b1001 2
17
06
b110 &
b110 .
b110 3
1>
19
1=
04
1<
b1111 "
b1111 *
b1111 1
b110 !
b110 )
b110 0
#12000
0'
b11 +
b1111 $
b1111 ,
b11 (
b11 /
b1000 %
b1000 -
b1000 2
07
16
b11 &
b11 .
b11 3
0>
0=
14
0<
b1011 "
b1011 *
b1011 1
b11 !
b11 )
b11 0
#13000
1'
b1 +
b110 $
b110 ,
b1001 (
b1001 /
17
06
1?
0:
b101 %
b101 -
b101 2
0C
b1000 &
b1000 .
b1000 3
1B
05
09
1=
08
1@
b1100 "
b1100 *
b1100 1
b1001 !
b1001 )
b1001 0
#14000
