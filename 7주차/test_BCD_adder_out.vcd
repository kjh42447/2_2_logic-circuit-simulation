$date
	Fri Oct 16 12:55:19 2020
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_BCD_adder $end
$scope module tb $end
$var wire 1 ! Cin $end
$var wire 1 " Cout $end
$var wire 4 # a [3:0] $end
$var wire 4 $ b [3:0] $end
$var wire 4 % z [3:0] $end
$var wire 4 & cc [3:0] $end
$var wire 1 ' c_n $end
$var wire 1 ( c $end
$var wire 4 ) Result [3:0] $end
$scope module Fba0 $end
$var wire 1 ! Cin $end
$var wire 4 * a [3:0] $end
$var wire 4 + b [3:0] $end
$var wire 1 , c2 $end
$var wire 1 - c1 $end
$var wire 1 . c0 $end
$var wire 4 / Sum [3:0] $end
$var wire 1 ( Cout $end
$scope module Fa0 $end
$var wire 1 ! Cin $end
$var wire 1 . Cout $end
$var wire 1 0 Sum $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 c0 $end
$var wire 1 4 c1 $end
$var wire 1 5 s0 $end
$upscope $end
$scope module Fa1 $end
$var wire 1 . Cin $end
$var wire 1 - Cout $end
$var wire 1 6 Sum $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 c0 $end
$var wire 1 : c1 $end
$var wire 1 ; s0 $end
$upscope $end
$scope module Fa2 $end
$var wire 1 - Cin $end
$var wire 1 , Cout $end
$var wire 1 < Sum $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? c0 $end
$var wire 1 @ c1 $end
$var wire 1 A s0 $end
$upscope $end
$scope module Fa3 $end
$var wire 1 , Cin $end
$var wire 1 ( Cout $end
$var wire 1 B Sum $end
$var wire 1 C a $end
$var wire 1 D b $end
$var wire 1 E c0 $end
$var wire 1 F c1 $end
$var wire 1 G s0 $end
$upscope $end
$upscope $end
$scope module Fba1 $end
$var wire 1 H Cin $end
$var wire 4 I a [3:0] $end
$var wire 4 J b [3:0] $end
$var wire 1 K c2 $end
$var wire 1 L c1 $end
$var wire 1 M c0 $end
$var wire 4 N Sum [3:0] $end
$var wire 1 ' Cout $end
$scope module Fa0 $end
$var wire 1 H Cin $end
$var wire 1 M Cout $end
$var wire 1 O Sum $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R c0 $end
$var wire 1 S c1 $end
$var wire 1 T s0 $end
$upscope $end
$scope module Fa1 $end
$var wire 1 M Cin $end
$var wire 1 L Cout $end
$var wire 1 U Sum $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X c0 $end
$var wire 1 Y c1 $end
$var wire 1 Z s0 $end
$upscope $end
$scope module Fa2 $end
$var wire 1 L Cin $end
$var wire 1 K Cout $end
$var wire 1 [ Sum $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ^ c0 $end
$var wire 1 _ c1 $end
$var wire 1 ` s0 $end
$upscope $end
$scope module Fa3 $end
$var wire 1 K Cin $end
$var wire 1 ' Cout $end
$var wire 1 a Sum $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d c0 $end
$var wire 1 e c1 $end
$var wire 1 f s0 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
b0 N
0M
0L
0K
b0 J
b0 I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
b0 /
0.
0-
0,
b0 +
b0 *
b0 )
0(
0'
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#1000
1U
b11 )
b11 N
1O
1Z
1T
1W
1Q
16
b11 %
b11 /
b11 J
10
1;
15
18
11
b10 $
b10 +
b1 #
b1 *
#2000
b111 )
b111 N
1[
1`
1]
b111 %
b111 /
b111 J
1<
1A
1=
b101 #
b101 *
#3000
1'
1e
0[
1K
0`
1^
1V
1\
b110 &
b110 I
1"
0a
1f
0O
b10 )
b10 N
1U
1c
0T
1Z
1B
0Q
0W
1,
00
b1100 %
b1100 /
b1100 J
06
1-
0A
1?
05
0;
19
1>
01
17
b110 $
b110 +
b110 #
b110 *
#4000
1'
1O
0U
1L
1[
1K
1e
b101 )
b101 N
0a
1T
0Z
1X
0`
1^
1f
1Q
1W
1]
0(
1c
10
16
0-
0@
1<
0,
0F
b1111 %
b1111 /
b1111 J
1B
15
1;
09
1A
0?
1G
12
07
0=
1C
b111 $
b111 +
b1000 #
b1000 *
#5000
0'
1U
0L
0_
1[
0K
0e
b111 )
b111 N
0a
1Z
0X
1`
0^
0f
0W
0]
0c
06
0<
b1 %
b1 /
b1 J
0B
1(
0;
0A
0G
1E
08
0>
1D
b1001 $
b1001 +
#6000
